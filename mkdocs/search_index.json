{
    "docs": [
        {
            "location": "/", 
            "text": "@stefanwimmer128/core\n\n\nstefanwimmer128  core\n\n\nInstallation\n\n\n1\n2\n3\nyarn add @stefanwimmer128/core\n\n# or:\n\nnpm install @stefanwimmer128/core\n\n\n\n\n\n\nUsage\n\n\n\n\nTry @stefanwimmer128/core\n\n\n\n\n@stefanwimmer128/core can be used with ES6-style import, CommonJS, AMD and in the Browser.\n\n\n1\n2\n3\n4\n5\n6\n7\n/* ES6-style import */\n\n\nimport\n \n*\n \nas\n \ncore\n \nfrom\n \n@stefanwimmer128/core\n;\n\n\n\n/* import just some functions (see below for more) */\n\n\nimport\n \n{\n\n    \nchain\n,\n\n\n}\n \nfrom\n \n@stefanwimmer128/core\n;\n\n\n\n\n\n\n\n1\n2\n/* CommonJS */\n\n\nvar\n \ncore\n \n=\n \nrequire\n(\n@stefanwimmer128/core\n);\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n/* AMD */\n\n\nrequire\n([\n \nnode_modules/@stefanwimmer128/core/dist/core.js\n \n],\n \nfunction\n \n(\ncore\n)\n\n\n{\n\n    \n/* use core here */\n\n\n});\n\n\n\n\n\n\n\n1\n2\n!-- Browser --\n\n\nscript\n \nsrc\n=\nnode_modules/@stefanwimmer128/core/dist/core.js\n/\nscript\n\n\n\n\n\n\n\nThe builds in the \ndist/\n folder are bundled with all required dependencies.\n\n\nIt is possible to import single functions by importing the required file from the \njs/\n folder. This is only possible in ES6-style import and CommonJS.\n\n\n1\n2\n/* ES6-style import */\n\n\nimport\n \nchain\n \nfrom\n \n@stefanwimmer128/core/js/utils/chain\n;\n\n\n\n\n\n\n\n1\n2\n/* CommonJS */\n\n\nvar\n \nchain\n \n=\n \nrequire\n(\n@stefanwimmer128/core/js/utils/chain\n).\ndefault\n;\n\n\n\n\n\n\n\nAPI documentation\n\n\n@stefanwimmer128/core exports the following functions:\n\n\n\n\nArray operations\n\n\n#concat\n -  Add value(s) to array\n\n\n#each\n - Cycle through each element in an array\n\n\n#filter\n - Filter elements in array\n\n\n#find\n - Find element in array\n\n\n#flatten\n - Flatten array\n\n\n#map\n - Map through elements in array\n\n\n#mapKey\n - Map elements to key\n\n\n#reduce\n - Process array\n\n\n#reverse\n - Reverse array\n\n\n#shift\n - Remove elements from head of array\n\n\n\n\n\n\nBoolean operations\n\n\n#invert\n - Invert boolean value or wrap function to return inverted boolea value\n\n\n\n\n\n\nFunction operations\n\n\n#processors\n - Wrap function to preprocess arguments and postprocess return value\n\n\n\n\n\n\nMath operations\n\n\n#sum\n - Sum up numbers\n\n\n\n\n\n\nObject operations\n\n\n#extend\n - Extend object\n\n\n#withProperty\n - Returns object with given key changed to given value\n\n\n\n\n\n\nUtils\n\n\n#chain\n - Allows to use above functions in a chained structure\n\n\n\n\n\n\n\n\nThese functions are curried, so usage looks like this:\n\n\n1\n2\nconst\n \nmap\n \n=\n \ncore\n.\nmap\n(\nt\n \n=\n \nt\n \n+\n \n1\n);\n\n\nmap\n([\n \n0\n,\n \n1\n,\n \n2\n,\n \n3\n \n]);\n \n/* [ 1, 2, 3, 4 ] */", 
            "title": "Home"
        }, 
        {
            "location": "/#stefanwimmer128core", 
            "text": "stefanwimmer128  core", 
            "title": "@stefanwimmer128/core"
        }, 
        {
            "location": "/#installation", 
            "text": "1\n2\n3 yarn add @stefanwimmer128/core # or: \nnpm install @stefanwimmer128/core", 
            "title": "Installation"
        }, 
        {
            "location": "/#usage", 
            "text": "Try @stefanwimmer128/core   @stefanwimmer128/core can be used with ES6-style import, CommonJS, AMD and in the Browser.  1\n2\n3\n4\n5\n6\n7 /* ES6-style import */  import   *   as   core   from   @stefanwimmer128/core ;  /* import just some functions (see below for more) */  import   { \n     chain ,  }   from   @stefanwimmer128/core ;    1\n2 /* CommonJS */  var   core   =   require ( @stefanwimmer128/core );    1\n2\n3\n4\n5 /* AMD */  require ([   node_modules/@stefanwimmer128/core/dist/core.js   ],   function   ( core )  { \n     /* use core here */  });    1\n2 !-- Browser --  script   src = node_modules/@stefanwimmer128/core/dist/core.js / script    The builds in the  dist/  folder are bundled with all required dependencies.  It is possible to import single functions by importing the required file from the  js/  folder. This is only possible in ES6-style import and CommonJS.  1\n2 /* ES6-style import */  import   chain   from   @stefanwimmer128/core/js/utils/chain ;    1\n2 /* CommonJS */  var   chain   =   require ( @stefanwimmer128/core/js/utils/chain ). default ;", 
            "title": "Usage"
        }, 
        {
            "location": "/#api-documentation", 
            "text": "@stefanwimmer128/core exports the following functions:   Array operations  #concat  -  Add value(s) to array  #each  - Cycle through each element in an array  #filter  - Filter elements in array  #find  - Find element in array  #flatten  - Flatten array  #map  - Map through elements in array  #mapKey  - Map elements to key  #reduce  - Process array  #reverse  - Reverse array  #shift  - Remove elements from head of array    Boolean operations  #invert  - Invert boolean value or wrap function to return inverted boolea value    Function operations  #processors  - Wrap function to preprocess arguments and postprocess return value    Math operations  #sum  - Sum up numbers    Object operations  #extend  - Extend object  #withProperty  - Returns object with given key changed to given value    Utils  #chain  - Allows to use above functions in a chained structure     These functions are curried, so usage looks like this:  1\n2 const   map   =   core . map ( t   =   t   +   1 );  map ([   0 ,   1 ,   2 ,   3   ]);   /* [ 1, 2, 3, 4 ] */", 
            "title": "API documentation"
        }, 
        {
            "location": "/array/concat/", 
            "text": "#concat\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\nconcat\n(\nconcat\n)(\narray\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconcat\n\n\nany / any[]\n\n\nValue or array of values to concat to array\n\n\n\n\n\n\narray\n\n\nany[]\n\n\nArray to concat to\n\n\n\n\n\n\n\n\nUsage\n\n\nSee \nArray.prototype.concat\n. Add value(s) to array.\n\n\n1\ncore\n.\nconcat\n([\n \n2\n,\n \n3\n,\n \n])([\n \n0\n,\n \n1\n,\n \n]);\n \n/* [ 0, 1, 2, 3, ] */", 
            "title": "#concat"
        }, 
        {
            "location": "/array/concat/#concat-api-documentation", 
            "text": "", 
            "title": "#concat API documentation"
        }, 
        {
            "location": "/array/concat/#syntax", 
            "text": "1 core . concat ( concat )( array );       Parameter  Type  Description      concat  any / any[]  Value or array of values to concat to array    array  any[]  Array to concat to", 
            "title": "Syntax"
        }, 
        {
            "location": "/array/concat/#usage", 
            "text": "See  Array.prototype.concat . Add value(s) to array.  1 core . concat ([   2 ,   3 ,   ])([   0 ,   1 ,   ]);   /* [ 0, 1, 2, 3, ] */", 
            "title": "Usage"
        }, 
        {
            "location": "/array/each/", 
            "text": "#each\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\neach\n(\nfunction\n \n(\nt\n,\n \ni\n,\n \ntArray\n)\n \n{})(\ntArray\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfunction (t, i, tArray) {}\n\n\n-\n\n\nFunction to execute for each element in array\n\n\n\n\n\n\nt\n\n\nany\n\n\nElement in array\n\n\n\n\n\n\ni\n\n\nnumber\n\n\nIndex of element\n\n\n\n\n\n\ntArray\n\n\nany[]\n\n\nOriginal array\n\n\n\n\n\n\n\n\nUsage\n\n\nSee \nArray.prototype.each\n. Cycle through each element in an array.\n\n\n1\n2\n3\n4\ncore\n.\neach\n(\nfunction\n \n(\nt\n,\n \ni\n,\n \ntArray\n)\n\n\n{\n\n    \nconsole\n.\nlog\n(\n[\n \n+\n \ni\n \n+\n \n] \n \n+\n \nt\n);\n\n\n})([\n \n0\n,\n \n1\n,\n \n2\n,\n \n3\n \n]);", 
            "title": "#each"
        }, 
        {
            "location": "/array/each/#each-api-documentation", 
            "text": "", 
            "title": "#each API documentation"
        }, 
        {
            "location": "/array/each/#syntax", 
            "text": "1 core . each ( function   ( t ,   i ,   tArray )   {})( tArray );       Parameter  Type  Description      function (t, i, tArray) {}  -  Function to execute for each element in array    t  any  Element in array    i  number  Index of element    tArray  any[]  Original array", 
            "title": "Syntax"
        }, 
        {
            "location": "/array/each/#usage", 
            "text": "See  Array.prototype.each . Cycle through each element in an array.  1\n2\n3\n4 core . each ( function   ( t ,   i ,   tArray )  { \n     console . log ( [   +   i   +   ]    +   t );  })([   0 ,   1 ,   2 ,   3   ]);", 
            "title": "Usage"
        }, 
        {
            "location": "/array/filter/", 
            "text": "#filter\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\nfilter\n(\nfunction\n \n(\nt\n,\n \ni\n,\n \ntArray\n)\n \n{})(\ntArray\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfunction (t, i, tArray) {}\n\n\nboolean\n\n\nFunction to filter elements of array\n\n\n\n\n\n\nt\n\n\nany\n\n\nElement in array\n\n\n\n\n\n\ni\n\n\nnumber\n\n\nIndex of element\n\n\n\n\n\n\ntArray\n\n\nany[]\n\n\nOriginal array\n\n\n\n\n\n\n\n\nUsage\n\n\nSee \nArray.prototype.filter\n. Filter elements in array.\n\n\n1\n2\n3\n4\ncore\n.\nfilter\n(\nfunction\n \n(\nt\n,\n \ni\n,\n \ntArray\n)\n\n\n{\n\n    \nreturn\n \nt\n \n \n1\n;\n\n\n})([\n \n0\n,\n \n1\n,\n \n2\n,\n \n3\n \n]);\n \n/* [ 2, 3 ] */", 
            "title": "#filter"
        }, 
        {
            "location": "/array/filter/#filter-api-documentation", 
            "text": "", 
            "title": "#filter API documentation"
        }, 
        {
            "location": "/array/filter/#syntax", 
            "text": "1 core . filter ( function   ( t ,   i ,   tArray )   {})( tArray );       Parameter  Type  Description      function (t, i, tArray) {}  boolean  Function to filter elements of array    t  any  Element in array    i  number  Index of element    tArray  any[]  Original array", 
            "title": "Syntax"
        }, 
        {
            "location": "/array/filter/#usage", 
            "text": "See  Array.prototype.filter . Filter elements in array.  1\n2\n3\n4 core . filter ( function   ( t ,   i ,   tArray )  { \n     return   t     1 ;  })([   0 ,   1 ,   2 ,   3   ]);   /* [ 2, 3 ] */", 
            "title": "Usage"
        }, 
        {
            "location": "/array/find/", 
            "text": "#find\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\nfind\n(\nfunction\n \n(\nt\n,\n \ni\n,\n \ntArray\n)\n \n{})(\ntArray\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfunction (t, i, tArray) {}\n\n\nboolean\n\n\nFunction to find element of array\n\n\n\n\n\n\nt\n\n\nany\n\n\nElement in array\n\n\n\n\n\n\ni\n\n\nnumber\n\n\nIndex of element\n\n\n\n\n\n\ntArray\n\n\nany[]\n\n\nOriginal array\n\n\n\n\n\n\n\n\nUsage\n\n\nSee \nArray.prototype.find\n. Find element in array.\n\n\n1\n2\n3\n4\ncore\n.\nfind\n(\nfunction\n \n(\nt\n,\n \ni\n,\n \ntArray\n)\n\n\n{\n\n    \nreturn\n \nt\n \n \n1\n;\n\n\n})([\n \n0\n,\n \n1\n,\n \n2\n,\n \n3\n \n]);\n \n/* 2 */", 
            "title": "#find"
        }, 
        {
            "location": "/array/find/#find-api-documentation", 
            "text": "", 
            "title": "#find API documentation"
        }, 
        {
            "location": "/array/find/#syntax", 
            "text": "1 core . find ( function   ( t ,   i ,   tArray )   {})( tArray );       Parameter  Type  Description      function (t, i, tArray) {}  boolean  Function to find element of array    t  any  Element in array    i  number  Index of element    tArray  any[]  Original array", 
            "title": "Syntax"
        }, 
        {
            "location": "/array/find/#usage", 
            "text": "See  Array.prototype.find . Find element in array.  1\n2\n3\n4 core . find ( function   ( t ,   i ,   tArray )  { \n     return   t     1 ;  })([   0 ,   1 ,   2 ,   3   ]);   /* 2 */", 
            "title": "Usage"
        }, 
        {
            "location": "/array/flatten/", 
            "text": "#flatten\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\nflatten\n(\narray\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\nany[]\n\n\nArray to flatten\n\n\n\n\n\n\n\n\nUsage\n\n\nFlatten array.\n\n\n1\ncore\n.\nflatten\n([\n \n0\n,\n \n1\n,\n \n[\n \n2\n,\n \n3\n \n],\n \n[\n \n[\n \n4\n,\n \n5\n \n],\n \n[\n \n6\n,\n \n7\n \n]\n \n]\n \n]);\n \n/* [ 0, 1, 2, 3, [ 4, 5 ], [ 6, 7] ] */", 
            "title": "#flatten"
        }, 
        {
            "location": "/array/flatten/#flatten-api-documentation", 
            "text": "", 
            "title": "#flatten API documentation"
        }, 
        {
            "location": "/array/flatten/#syntax", 
            "text": "1 core . flatten ( array );       Parameter  Type  Description      array  any[]  Array to flatten", 
            "title": "Syntax"
        }, 
        {
            "location": "/array/flatten/#usage", 
            "text": "Flatten array.  1 core . flatten ([   0 ,   1 ,   [   2 ,   3   ],   [   [   4 ,   5   ],   [   6 ,   7   ]   ]   ]);   /* [ 0, 1, 2, 3, [ 4, 5 ], [ 6, 7] ] */", 
            "title": "Usage"
        }, 
        {
            "location": "/array/map/", 
            "text": "#map\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\nmap\n(\nfunction\n \n(\nt\n,\n \ni\n,\n \ntArray\n)\n \n{})(\ntArray\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfunction (t, i, tArray) {}\n\n\nboolean\n\n\nFunction to map elements of array\n\n\n\n\n\n\nt\n\n\nany\n\n\nElement in array\n\n\n\n\n\n\ni\n\n\nnumber\n\n\nIndex of element\n\n\n\n\n\n\ntArray\n\n\nany[]\n\n\nOriginal array\n\n\n\n\n\n\n\n\nUsage\n\n\nSee \nArray.prototype.map\n. Map through elements in array.\n\n\n1\n2\n3\n4\ncore\n.\neach\n(\nfunction\n \n(\nt\n,\n \ni\n,\n \ntArray\n)\n\n\n{\n\n    \nreturn\n \nt\n \n+\n \n1\n;\n\n\n})([\n \n0\n,\n \n1\n,\n \n2\n,\n \n3\n \n]);\n \n/* [ 1, 2, 3, 4 ] */", 
            "title": "#map"
        }, 
        {
            "location": "/array/map/#map-api-documentation", 
            "text": "", 
            "title": "#map API documentation"
        }, 
        {
            "location": "/array/map/#syntax", 
            "text": "1 core . map ( function   ( t ,   i ,   tArray )   {})( tArray );       Parameter  Type  Description      function (t, i, tArray) {}  boolean  Function to map elements of array    t  any  Element in array    i  number  Index of element    tArray  any[]  Original array", 
            "title": "Syntax"
        }, 
        {
            "location": "/array/map/#usage", 
            "text": "See  Array.prototype.map . Map through elements in array.  1\n2\n3\n4 core . each ( function   ( t ,   i ,   tArray )  { \n     return   t   +   1 ;  })([   0 ,   1 ,   2 ,   3   ]);   /* [ 1, 2, 3, 4 ] */", 
            "title": "Usage"
        }, 
        {
            "location": "/array/mapKey/", 
            "text": "#mapKey\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\nmapKey\n(\nkey\n)(\nobjArray\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nKey elements should be mapped to\n\n\n\n\n\n\nobjArray\n\n\nObject[]\n\n\nArray of objects to be mapped\n\n\n\n\n\n\n\n\nUsage\n\n\nSee \n#map\n. Map elements to key.\n\n\n1\n2\n3\n4\n5\n6\ncore\n.\nmapKey\n(\nid\n)([\n\n    \n{\n \nid\n:\n \n0\n \n},\n\n    \n{\n \nid\n:\n \n1\n \n},\n\n    \n{\n \nid\n:\n \n2\n \n},\n\n    \n{\n \nid\n:\n \n3\n \n}\n\n\n]);\n \n/* [ 0, 1, 2, 3 ] */", 
            "title": "#mapKey"
        }, 
        {
            "location": "/array/mapKey/#mapkey-api-documentation", 
            "text": "", 
            "title": "#mapKey API documentation"
        }, 
        {
            "location": "/array/mapKey/#syntax", 
            "text": "1 core . mapKey ( key )( objArray );       Parameter  Type  Description      key  string  Key elements should be mapped to    objArray  Object[]  Array of objects to be mapped", 
            "title": "Syntax"
        }, 
        {
            "location": "/array/mapKey/#usage", 
            "text": "See  #map . Map elements to key.  1\n2\n3\n4\n5\n6 core . mapKey ( id )([ \n     {   id :   0   }, \n     {   id :   1   }, \n     {   id :   2   }, \n     {   id :   3   }  ]);   /* [ 0, 1, 2, 3 ] */", 
            "title": "Usage"
        }, 
        {
            "location": "/array/reduce/", 
            "text": "#reduce\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\nreduce\n(\nfunction\n \n(\nr\n,\n \nt\n,\n \ni\n,\n \ntArray\n)\n \n{},\n \nstart\n)(\ntArray\n,\n \nstart\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfunction (r, t, i, tArray) {}\n\n\nboolean\n\n\nFunction to process array with\n\n\n\n\n\n\nr\n\n\nany\n\n\nProcessing value\n\n\n\n\n\n\nt\n\n\nany\n\n\nElement in array\n\n\n\n\n\n\ni\n\n\nnumber\n\n\nIndex of element\n\n\n\n\n\n\ntArray\n\n\nany[]\n\n\nOriginal array\n\n\n\n\n\n\nstart\n\n\nany?\n\n\nStarting value\n\n\n\n\n\n\n\n\nUsage\n\n\nSee \nArray.prototype.reduce\n. Process array.\n\n\n1\n2\n3\n4\ncore\n.\nreduce\n(\nfunction\n \n(\nr\n,\n \nt\n,\n \ni\n,\n \ntArray\n)\n\n\n{\n\n    \nreturn\n \nr\n \n+\n \nt\n;\n\n\n},\n \n0\n)([\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n \n]);\n \n/* 10 */", 
            "title": "#reduce"
        }, 
        {
            "location": "/array/reduce/#reduce-api-documentation", 
            "text": "", 
            "title": "#reduce API documentation"
        }, 
        {
            "location": "/array/reduce/#syntax", 
            "text": "1 core . reduce ( function   ( r ,   t ,   i ,   tArray )   {},   start )( tArray ,   start );       Parameter  Type  Description      function (r, t, i, tArray) {}  boolean  Function to process array with    r  any  Processing value    t  any  Element in array    i  number  Index of element    tArray  any[]  Original array    start  any?  Starting value", 
            "title": "Syntax"
        }, 
        {
            "location": "/array/reduce/#usage", 
            "text": "See  Array.prototype.reduce . Process array.  1\n2\n3\n4 core . reduce ( function   ( r ,   t ,   i ,   tArray )  { \n     return   r   +   t ;  },   0 )([   1 ,   2 ,   3 ,   4   ]);   /* 10 */", 
            "title": "Usage"
        }, 
        {
            "location": "/array/reverse/", 
            "text": "#reverse\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\nreverse\n(\narray\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\nany[]\n\n\nArray to reverse\n\n\n\n\n\n\n\n\nUsage\n\n\nSee \nArray.prototype.reverse\n. Reverse array.\n\n\n1\ncore\n.\nreverse\n([\n \n0\n,\n \n1\n,\n \n2\n,\n \n3\n \n]);\n \n/* [ 3, 2, 1, 0 ] */", 
            "title": "#reverse"
        }, 
        {
            "location": "/array/reverse/#reverse-api-documentation", 
            "text": "", 
            "title": "#reverse API documentation"
        }, 
        {
            "location": "/array/reverse/#syntax", 
            "text": "1 core . reverse ( array );       Parameter  Type  Description      array  any[]  Array to reverse", 
            "title": "Syntax"
        }, 
        {
            "location": "/array/reverse/#usage", 
            "text": "See  Array.prototype.reverse . Reverse array.  1 core . reverse ([   0 ,   1 ,   2 ,   3   ]);   /* [ 3, 2, 1, 0 ] */", 
            "title": "Usage"
        }, 
        {
            "location": "/array/shift/", 
            "text": "#shift\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\nshift\n(\nshift\n)(\naraay\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nshift = 1\n\n\nnumber?\n\n\nNumber of elements to be removed from head of array\n\n\n\n\n\n\narray\n\n\nany[]\n\n\nArray to remove elements from\n\n\n\n\n\n\n\n\nUsage\n\n\nSee \nArray.prototype.shift\n. Remove elements from head of array.\n\n\n1\n2\n3\ncore\n.\nshift\n()([\n \n0\n,\n \n1\n,\n \n2\n,\n \n3\n \n]);\n \n/* [ 1, 2, 3, ] */\n\n\n\ncore\n.\nshift\n(\n2\n)([\n \n0\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n]);\n \n/* [ 2, 3, ] */", 
            "title": "#shift"
        }, 
        {
            "location": "/array/shift/#shift-api-documentation", 
            "text": "", 
            "title": "#shift API documentation"
        }, 
        {
            "location": "/array/shift/#syntax", 
            "text": "1 core . shift ( shift )( araay );       Parameter  Type  Description      shift = 1  number?  Number of elements to be removed from head of array    array  any[]  Array to remove elements from", 
            "title": "Syntax"
        }, 
        {
            "location": "/array/shift/#usage", 
            "text": "See  Array.prototype.shift . Remove elements from head of array.  1\n2\n3 core . shift ()([   0 ,   1 ,   2 ,   3   ]);   /* [ 1, 2, 3, ] */  core . shift ( 2 )([   0 ,   1 ,   2 ,   3 ,   ]);   /* [ 2, 3, ] */", 
            "title": "Usage"
        }, 
        {
            "location": "/boolean/invert/", 
            "text": "#invert\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\ninvert\n(\nboolean\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean\n\n\nboolean\n\n\nBoolean to invert\n\n\n\n\n\n\nboolean\n\n\nfunction\n\n\nFunction to wrap to invert return value\n\n\n\n\n\n\n\n\nUsage\n\n\nInvert boolean value or wrap function to return inverted boolea value.\n\n\n1\n2\n3\n4\n5\n6\ncore\n.\ninvert\n(\ntrue\n);\n \n/* false */\n\n\n\ncore\n.\ninvert\n(\nfunction\n \n()\n\n\n{\n\n    \nreturn\n \nfalse\n;\n\n\n})();\n \n/* true */", 
            "title": "#invert"
        }, 
        {
            "location": "/boolean/invert/#invert-api-documentation", 
            "text": "", 
            "title": "#invert API documentation"
        }, 
        {
            "location": "/boolean/invert/#syntax", 
            "text": "1 core . invert ( boolean );       Parameter  Type  Description      boolean  boolean  Boolean to invert    boolean  function  Function to wrap to invert return value", 
            "title": "Syntax"
        }, 
        {
            "location": "/boolean/invert/#usage", 
            "text": "Invert boolean value or wrap function to return inverted boolea value.  1\n2\n3\n4\n5\n6 core . invert ( true );   /* false */  core . invert ( function   ()  { \n     return   false ;  })();   /* true */", 
            "title": "Usage"
        }, 
        {
            "location": "/function/processors/", 
            "text": "#processors\n API documentation\n\n\nSyntax\n\n\n1\n2\n3\n4\n5\n6\n7\ncore\n.\nprocessors\n(\nfunction\n \n(\nargs\n)\n\n\n{\n\n    \nreturn\n \nargs\n;\n\n\n},\n \nfunction\n \n(\nvalue\n)\n\n\n{\n\n    \nreturn\n \nvalue\n;\n\n\n})(\nsomeFunction\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfunction (args) { return args; }\n\n\n-\n\n\nPre processor - Handeling arguments (No processing on undefined/null)\n\n\n\n\n\n\nargs\n\n\nany[]\n\n\nArguments to pass to \nsomeFunction\n\n\n\n\n\n\nfunction (value) { return value; }\n\n\n-\n\n\nPost processor - Handeling return value (No processing on undefined/null)\n\n\n\n\n\n\nvalue\n\n\nany\n\n\nReturn value from \nsomeFunction\n\n\n\n\n\n\nsomeFunction\n\n\nfunction\n\n\nFunction to wrap processors around\n\n\n\n\n\n\n\n\nUsage\n\n\nWrap function to preprocess arguments and postprocess return value.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ncore\n.\nprocessors\n(\ncore\n.\nmap\n(\nfunction\n \n(\nt\n)\n\n\n{\n\n    \nreturn\n \nt\n \n+\n \n1\n;\n \n/* Adds 1 to every argument */\n\n\n}),\n \nfunction\n \n(\nvalue\n)\n \n/* 3 */\n\n\n{\n\n    \nreturn\n \nvalue\n \n+\n \n1\n;\n \n/* 4 */\n\n\n})(\nfunction\n \n(\na\n,\n \nb\n)\n\n\n{\n\n    \nreturn\n \na\n \n+\n \nb\n;\n\n\n})(\n0\n,\n \n1\n);\n \n/* 4 */", 
            "title": "#processors"
        }, 
        {
            "location": "/function/processors/#processors-api-documentation", 
            "text": "", 
            "title": "#processors API documentation"
        }, 
        {
            "location": "/function/processors/#syntax", 
            "text": "1\n2\n3\n4\n5\n6\n7 core . processors ( function   ( args )  { \n     return   args ;  },   function   ( value )  { \n     return   value ;  })( someFunction );       Parameter  Type  Description      function (args) { return args; }  -  Pre processor - Handeling arguments (No processing on undefined/null)    args  any[]  Arguments to pass to  someFunction    function (value) { return value; }  -  Post processor - Handeling return value (No processing on undefined/null)    value  any  Return value from  someFunction    someFunction  function  Function to wrap processors around", 
            "title": "Syntax"
        }, 
        {
            "location": "/function/processors/#usage", 
            "text": "Wrap function to preprocess arguments and postprocess return value.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 core . processors ( core . map ( function   ( t )  { \n     return   t   +   1 ;   /* Adds 1 to every argument */  }),   function   ( value )   /* 3 */  { \n     return   value   +   1 ;   /* 4 */  })( function   ( a ,   b )  { \n     return   a   +   b ;  })( 0 ,   1 );   /* 4 */", 
            "title": "Usage"
        }, 
        {
            "location": "/math/sum/", 
            "text": "#sum\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\nsum\n(...\nnumbers\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumbers\n\n\nnumber[]\n\n\nNumbers to sum up\n\n\n\n\n\n\n\n\nUsage\n\n\nSum up numbers.\n\n\n1\ncore\n.\nsum\n(\n1\n,\n \n2\n,\n \n3\n,\n \n4\n);\n \n/* 10 */\n\n\n\n\n\n\n\nUsing \n#chain\n\n\nIn \n#chain\n this function is called \n#add\n.\n\n\n1\ncore\n.\nchain\n(\n1\n).\nadd\n(\n2\n,\n \n3\n).\nadd\n(\n4\n).\nvalue\n();\n \n/* 10 */", 
            "title": "#sum"
        }, 
        {
            "location": "/math/sum/#sum-api-documentation", 
            "text": "", 
            "title": "#sum API documentation"
        }, 
        {
            "location": "/math/sum/#syntax", 
            "text": "1 core . sum (... numbers );       Parameter  Type  Description      numbers  number[]  Numbers to sum up", 
            "title": "Syntax"
        }, 
        {
            "location": "/math/sum/#usage", 
            "text": "Sum up numbers.  1 core . sum ( 1 ,   2 ,   3 ,   4 );   /* 10 */", 
            "title": "Usage"
        }, 
        {
            "location": "/math/sum/#using-chain", 
            "text": "In  #chain  this function is called  #add .  1 core . chain ( 1 ). add ( 2 ,   3 ). add ( 4 ). value ();   /* 10 */", 
            "title": "Using #chain"
        }, 
        {
            "location": "/object/extend/", 
            "text": "#extend\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\nextend\n(\nsource\n)(\ntarget\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nObject\n\n\nSource object\n\n\n\n\n\n\ntarget\n\n\nObject\n\n\nTarget object\n\n\n\n\n\n\n\n\nUsage\n\n\nSee \nObject.assign\n. Extend object: \nsource\n \n \ntarget\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\ncore\n.\nextend\n({\n\n    \na\n:\n \n0\n,\n\n    \nb\n:\n \nnull\n,\n\n    \nc\n:\n \n2\n,\n\n\n})({\n\n    \nb\n:\n \n1\n,\n\n    \nd\n:\n \n3\n,\n\n\n});\n \n/* {\n\n\n    a: 0,\n\n\n    b: 1,\n\n\n    c: 2,\n\n\n    d: 3,\n\n\n} */", 
            "title": "#extend"
        }, 
        {
            "location": "/object/extend/#extend-api-documentation", 
            "text": "", 
            "title": "#extend API documentation"
        }, 
        {
            "location": "/object/extend/#syntax", 
            "text": "1 core . extend ( source )( target );       Parameter  Type  Description      source  Object  Source object    target  Object  Target object", 
            "title": "Syntax"
        }, 
        {
            "location": "/object/extend/#usage", 
            "text": "See  Object.assign . Extend object:  source     target .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 core . extend ({ \n     a :   0 , \n     b :   null , \n     c :   2 ,  })({ \n     b :   1 , \n     d :   3 ,  });   /* {      a: 0,      b: 1,      c: 2,      d: 3,  } */", 
            "title": "Usage"
        }, 
        {
            "location": "/object/withProperty/", 
            "text": "#withProperty\n API documentation\n\n\nSyntax\n\n\n1\ncore\n.\nwithProperty\n(\nkeys\n,\n \nvalue\n)(\nobj\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkeys\n\n\nstring / (number\n\n\nstring)[]\n\n\n\n\n\n\nvalue\n\n\nany\n\n\nValue to set key to\n\n\n\n\n\n\nobj\n\n\nObject\n\n\nObject to change key in\n\n\n\n\n\n\n\n\nUsage\n\n\nReturns object with given key changed to given value.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ncore\n.\nwithProperty\n([\n \nsomthing\n,\n \n0\n,\n \n],\n \ntrue\n)({\n\n    \nsomething\n:\n \n[\n \nfalse\n,\n \n],\n\n\n});\n \n/* {\n\n\n    something: [ true, ],\n\n\n} */\n\n\n\ncore\n.\nwithProperty\n(\nsomething.0\n,\n \ntrue\n)({\n\n    \nsomething\n:\n \n[\n \nfalse\n,\n \n],\n\n\n});\n \n/* {\n\n\n    something: [ true, ],\n\n\n} */", 
            "title": "#withProperty"
        }, 
        {
            "location": "/object/withProperty/#withproperty-api-documentation", 
            "text": "", 
            "title": "#withProperty API documentation"
        }, 
        {
            "location": "/object/withProperty/#syntax", 
            "text": "1 core . withProperty ( keys ,   value )( obj );       Parameter  Type  Description      keys  string / (number  string)[]    value  any  Value to set key to    obj  Object  Object to change key in", 
            "title": "Syntax"
        }, 
        {
            "location": "/object/withProperty/#usage", 
            "text": "Returns object with given key changed to given value.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 core . withProperty ([   somthing ,   0 ,   ],   true )({ \n     something :   [   false ,   ],  });   /* {      something: [ true, ],  } */  core . withProperty ( something.0 ,   true )({ \n     something :   [   false ,   ],  });   /* {      something: [ true, ],  } */", 
            "title": "Usage"
        }, 
        {
            "location": "/utils/chain/", 
            "text": "#chain\n API Documentation\n\n\nSyntax\n\n\n1\ncore\n.\nchain\n(\ninitialValue\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninitialValue\n\n\nany\n\n\nInitial value for chain to process\n\n\n\n\n\n\n\n\nUsage\n\n\nAllows to use above functions in a chained structure. Chain functions together to process \ninitialValue\n in order. Execution only on \n#value\n call.\n\n\n1\n2\n3\n4\n5\n6\n7\ncore\n.\nchain\n([\n \n0\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n]).\nmap\n(\nfunction\n \n(\nt\n)\n\n\n{\n\n    \nreturn\n \nt\n \n+\n \n1\n;\n\n\n}).\nreduce\n(\nfunction\n \n(\nt\n,\n \nt\n)\n\n\n{\n\n    \nreturn\n \nr\n \n+\n \nt\n;\n\n\n}).\nvalue\n();\n \n/* 10 */\n\n\n\n\n\n\n\nTo manually tap into the chain use the \n#tap\n function.\n\n\n1\n2\n3\n4\ncore\n.\nchain\n(\n0\n).\ntap\n(\nfunction\n \n(\nvalue\n)\n\n\n{\n\n    \nreturn\n \nvalue\n \n+\n \n1\n;\n\n\n}).\nvalue\n();\n \n/* 1 */\n\n\n\n\n\n\n\nChainable functions\n\n\n\n\nArray operations\n\n\n#concat\n\n\n#filter\n\n\n#find\n\n\n#flatten\n\n\n#map\n\n\n#mapKey\n\n\n#reduce\n\n\n#reverse\n\n\n#shift\n\n\n\n\n\n\nBoolean operations\n\n\n#invert\n\n\n\n\n\n\nMath operations\n\n\n#sum\n as \n#add\n\n\n\n\n\n\nObject operations\n\n\n#extend\n\n\n#withProperty\n\n\n\n\n\n\nFunction operations\n\n\n#processors", 
            "title": "#chain"
        }, 
        {
            "location": "/utils/chain/#chain-api-documentation", 
            "text": "", 
            "title": "#chain API Documentation"
        }, 
        {
            "location": "/utils/chain/#syntax", 
            "text": "1 core . chain ( initialValue );       Parameter  Type  Description      initialValue  any  Initial value for chain to process", 
            "title": "Syntax"
        }, 
        {
            "location": "/utils/chain/#usage", 
            "text": "Allows to use above functions in a chained structure. Chain functions together to process  initialValue  in order. Execution only on  #value  call.  1\n2\n3\n4\n5\n6\n7 core . chain ([   0 ,   1 ,   2 ,   3 ,   ]). map ( function   ( t )  { \n     return   t   +   1 ;  }). reduce ( function   ( t ,   t )  { \n     return   r   +   t ;  }). value ();   /* 10 */    To manually tap into the chain use the  #tap  function.  1\n2\n3\n4 core . chain ( 0 ). tap ( function   ( value )  { \n     return   value   +   1 ;  }). value ();   /* 1 */", 
            "title": "Usage"
        }, 
        {
            "location": "/utils/chain/#chainable-functions", 
            "text": "Array operations  #concat  #filter  #find  #flatten  #map  #mapKey  #reduce  #reverse  #shift    Boolean operations  #invert    Math operations  #sum  as  #add    Object operations  #extend  #withProperty    Function operations  #processors", 
            "title": "Chainable functions"
        }
    ]
}