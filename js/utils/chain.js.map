{"version":3,"sources":["utils/chain.js"],"names":["chain","Chain","initialValue","actions","CHAINABLE","i","args","tap","length","action","push","value"],"mappings":";;;;;;;;;;;;;;;;;;sBA2DwBA,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9CxB,sDAAc,+BAAC,qCAAQ,2BAAR,CAAD,+BAAiB,2BAAjB,EAAd;;AACA,oEAAqB,+BAAI,mCAAO,4BAAM,2BAAN,CAAP,CAAJ,+BAA0B,MAA1B,EAArB;;AAEA,oBAAgB,4BAAQ,4DAAS,aAAT,CAAR,CAAhB,QAAkD;AAC9C;AACA,YAF8C,oBAG9C,MAH8C,kBAI9C,KAJ8C,iBAK9C,QAL8C,oBAM9C,QAN8C,oBAO9C,SAP8C,EAOnC;AAAA;AAAA,KAPmC;;AAS9C;AACA,YAV8C,EAUpC;AAAA;AAAA,KAVoC,CAAlD;;QAaMC,K;AAEF,uBAAYC,YAAZ,EACA;AAAA;;AAAA;;AAAA,oCADyB,2BACzB;;AAAA;;AACI,iBAAKC,OAAL,GAAe,EAAf;AACA,iBAAKD,YAAL,GAAoBA,YAApB;;AAFJ;AAKQ,sBAAKE,UAAUC,CAAV,CAAL,mCAAqB;AAAA,sDAAIC,IAAJ;AAAIA,4BAAJ;AAAA;;AAAA,oCAAS,4BAAQ,2BAAR,CAAT;;AAAA,mEAAyB,gCAAzB;;AAAA;;AAAA,8CACjB,MAAKC,GAAL,CAA2B,aAAlB,QAACH,UAAUC,IAAI,CAAd,CAAD,mBAAsCC,IAAtC,CAAT,CADiB;AAAA,iBAArB,EAAqB,kEAAS,4BAAQ,2BAAR,CAAT,gCAAuB,gCAAvB,EAArB;AALR;;AAII,iBAAK,cAAM,8BAAN,qBAAiB,CAAjB,CAAL,EAAyBD,IAAID,UAAUI,MAAvC,EAA+CH,oBAAK,CAAL,CAA/C;AAAA;AAAA;AAGH;;;;gCAEGI,M,EACJ;AAAA,kCADW,MACX;;AAAA,gEADuB,gCACvB;;AAAA;;AACI,qBAAKN,OAAL,CAAaO,IAAb,CAAkBD,MAAlB;;AAEA,2CAAO,IAAP;AACH;;;oCAGD;AAAA,gEADU,2BACV;;AACI,oBAAIE,QAAQ,KAAKT,YAAjB;;AADJ;AAAA;AAAA;;AAAA;AAGI,yCAAqB,KAAKC,OAA1B;AAAA,4BAAWM,MAAX;;AACQE,gCAAQF,OAAOE,KAAP,CAAR;AADR;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMI,2CAAOA,KAAP;AACH;;;;;;AAGU,aAASX,KAAT,CAAeE,YAAf,EACf;AAAA,iCAD2C,2BAC3C;;AAAA,wDADoD,gCACpD;;AAAA;;AACI,mCAAO,IAAID,KAAJ,CAAUC,YAAV,CAAP;AACH;;mCAHuBF,K,EAAT,2EAA4B,2BAA5B,gCAAmC,gCAAnC,E","file":"chain.js","sourcesContent":["/* @flow */\n\n/* array */\nimport filter from \"../array/filter\";\nimport find from \"../array/find\";\nimport map from \"../array/map\";\nimport mapKey from \"../array/mapKey\";\nimport reduce from \"../array/reduce\";\nimport reverse from \"../array/reverse\";\n\n/* boolean */\nimport invert from \"../boolean/invert\";\n\ntype Action = (value : any) => any;\ntype ActionCreater = (...args : Array<any>) => Action;\n\nconst CHAINABLE : Array<string | ActionCreater> = [\n    /* array */\n    \"filter\", filter,\n    \"find\", find,\n    \"map\", map,\n    \"mapKey\", mapKey,\n    \"reduce\", reduce,\n    \"reverse\", () => reverse,\n    \n    /* boolean */\n    \"invert\", () => invert,\n];\n\nclass Chain\n{\n    constructor(initialValue : any)\n    {\n        this.actions = [];\n        this.initialValue = initialValue;\n        \n        for (let i : number = 0; i < CHAINABLE.length; i += 2)\n            this[CHAINABLE[i]] = (...args : Array<any>) : Chain =>\n                this.tap((CHAINABLE[i + 1] : ActionCreater)(...args));\n    }\n    \n    tap(action : Action) : Chain\n    {\n        this.actions.push(action);\n        \n        return this;\n    }\n    \n    value() : any\n    {\n        let value = this.initialValue;\n        \n        for (const action of this.actions)\n                value = action(value);\n        \n        return value;\n    }\n}\n\nexport default function chain(initialValue : any) : Chain\n{\n    return new Chain(initialValue);\n}\n"]}