{"version":3,"sources":["utils/chain.js"],"names":["chain","CHAINABLE","concat","filter","find","flatten","map","mapKey","reduce","reverse","shift","invert","processors","add","numbers","bind","extend","withProperty","Chain","initialValue","actions","action","push","value","chainable","prototype","args","tap"],"mappings":";;;;;;;;;;;;;;;;;;sBAqFwBA,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3DxB,QAAMC,YAAY;AACd;AACAC,gCAFc;AAGdC,gCAHc;AAIdC,4BAJc;AAKdC,iBAAS;AAAA;AAAA,SALK;AAMdC,0BANc;AAOdC,gCAPc;AAQdC,gCARc;AASdC,iBAAS;AAAA;AAAA,SATK;AAUdC,8BAVc;;AAYd;AACAC,gBAAQ;AAAA;AAAA,SAbM;;AAed;AACAC,wCAhBc;;AAkBd;AACAC,4CAAK;AAAA,8CAAIC,OAAJ;AAAIA,uBAAJ;AAAA;;AAAA,+BAAY,4BAAE,8BAAF,CAAZ;;AAAA;;AAAA,mBACD,cAAIC,IAAJ,uBAAS,IAAT,4BAAkBD,OAAlB,GADC;AAAA,SAAL,EAAK,qEAAY,4BAAE,8BAAF,CAAZ,EAAL,CAnBc;;AAsBd;AACAE,gCAvBc;AAwBdC;AAxBc,KAAlB;;QA2BMC,K;AAEF,uBAAYC,YAAZ,EACA;AAAA;;AAAA,oCADyB,2BACzB;;AAAA;;AACI,iBAAKC,OAAL,GAAe,EAAf;AACA,iBAAKD,YAAL,GAAoBA,YAApB;AACH;;;;gCAEGE,M,EACJ;AAAA,kCADW,+BAAG,qCAAQ,2BAAR,CAAH,+BAAmB,2BAAnB,EACX;;AAAA,+DADqC,gCACrC;;AAAA;;AACI,qBAAKD,OAAL,CAAaE,IAAb,CAAkBD,MAAlB;;AAEA,0CAAO,IAAP;AACH;;;oCAGD;AAAA,gEADU,2BACV;;AACI,oBAAIE,QAAQ,KAAKJ,YAAjB;;AADJ;AAAA;AAAA;;AAAA;AAGI,yCAAqB,KAAKC,OAA1B;AAAA,4BAAWC,MAAX;;AACQE,gCAAQF,OAAOE,KAAP,CAAR;AADR;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMI,2CAAOA,KAAP;AACH;;;;;;+BAGMC,S;AACPN,cAAMO,SAAN,CAAgBD,SAAhB,mCAA6B,YAC7B;AAAA,4BAD+C,4BAAE,2BAAF,CAC/C;;AAAA,4DAD0D,gCAC1D;;AAAA,+CAD0CE,IAC1C;AAD0CA,oBAC1C;AAAA;;AAAA;;AACI,uCAAO,KAAKC,GAAL,CAAS1B,UAAUuB,SAAV,sCAAwBE,IAAxB,EAAT,CAAP;AACH,SAHD,EAA6B,kEAAkB,4BAAE,2BAAF,CAAlB,gCAA2B,gCAA3B,EAA7B;;;AADJ,SAAK,IAAMF,SAAX,IAAwBvB,SAAxB;AAAA,cAAWuB,SAAX;AAAA,KAMe,SAASxB,KAAT,CAAemB,YAAf,EACf;AAAA,iCAD2C,2BAC3C;;AAAA,wDADoD,gCACpD;;AAAA;;AACI,mCAAO,IAAID,KAAJ,CAAUC,YAAV,CAAP;AACH;;mCAHuBnB,K,EAAT,2EAA4B,2BAA5B,gCAAmC,gCAAnC,E","file":"chain.js","sourcesContent":["/* @flow */\n\n/* array */\nimport concat from \"../array/concat\";\nimport filter from \"../array/filter\";\nimport find from \"../array/find\";\nimport flatten from \"../array/flatten\";\nimport map from \"../array/map\";\nimport mapKey from \"../array/mapKey\";\nimport reduce from \"../array/reduce\";\nimport reverse from \"../array/reverse\";\nimport shift from \"../array/shift\";\n\n/* boolean */\nimport invert from \"../boolean/invert\";\n\n/* function */\nimport processors from \"../function/processors\";\n\n/* math */\nimport sum from \"../math/sum\";\n\n/* object */\nimport extend from \"../object/extend\";\nimport withProperty from \"../object/withProperty\";\n\nconst CHAINABLE = {\n    /* array */\n    concat,\n    filter,\n    find,\n    flatten: () => flatten,\n    map,\n    mapKey,\n    reduce,\n    reverse: () => reverse,\n    shift,\n    \n    /* boolean */\n    invert: () => invert,\n    \n    /* function */\n    processors,\n    \n    /* math */\n    add: (...numbers : number[]) =>\n        sum.bind(null, ...numbers),\n    \n    /* object */\n    extend,\n    withProperty,\n};\n\nclass Chain\n{\n    constructor(initialValue : any)\n    {\n        this.actions = [];\n        this.initialValue = initialValue;\n    }\n    \n    tap(action : (value : any) => any) : Chain\n    {\n        this.actions.push(action);\n        \n        return this;\n    }\n    \n    value() : any\n    {\n        let value = this.initialValue;\n        \n        for (const action of this.actions)\n                value = action(value);\n        \n        return value;\n    }\n}\n\nfor (const chainable in CHAINABLE)\n    Chain.prototype[chainable] = function (...args : any[]) : Chain\n    {\n        return this.tap(CHAINABLE[chainable](...args));\n    };\n\nexport default function chain(initialValue : any) : Chain\n{\n    return new Chain(initialValue);\n}\n"]}