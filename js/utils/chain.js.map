{"version":3,"sources":["utils/chain.js"],"names":["chain","CHAINABLE","filter","find","flatten","map","mapKey","reduce","reverse","invert","processors","add","numbers","bind","extend","Chain","initialValue","actions","action","push","value","chainable","prototype","args","tap"],"mappings":";;;;;;;;;;;;;;;;;;;;;;kBA+EwBA,K;;AA5ExB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AAGA;;;;AAGA;;;;AAGA;;;;;;;;;;AADA;;;AANA;;;AAZA;AAqBA,IAAMC,YAAY;AACd;AACAC,4BAFc;AAGdC,wBAHc;AAIdC,aAAS;AAAA;AAAA,KAJK;AAKdC,sBALc;AAMdC,4BANc;AAOdC,4BAPc;AAQdC,aAAS;AAAA;AAAA,KARK;;AAUd;AACAC,YAAQ;AAAA;AAAA,KAXM;;AAad;AACAC,oCAdc;;AAgBd;AACAC,wCAAK;AAAA,0CAAIC,OAAJ;AAAIA,mBAAJ;AAAA;;AAAA,2BAAY,4BAAE,8BAAF,CAAZ;;AAAA;;AAAA,eACD,cAAIC,IAAJ,uBAAS,IAAT,0CAAkBD,OAAlB,GADC;AAAA,KAAL,EAAK,qEAAY,4BAAE,8BAAF,CAAZ,EAAL,CAjBc;;AAoBd;AACAE;AArBc,CAAlB;;AANA;;;AANA;;IAoCMC,K;AAEF,mBAAYC,YAAZ,EACA;AAAA;;AAAA,gCADyB,2BACzB;;AAAA;;AACI,aAAKC,OAAL,GAAe,EAAf;AACA,aAAKD,YAAL,GAAoBA,YAApB;AACH;;;;4BAEGE,M,EACJ;AAAA,8BADW,+BAAG,qCAAQ,2BAAR,CAAH,+BAAmB,2BAAnB,EACX;;AAAA,2DADqC,gCACrC;;AAAA;;AACI,iBAAKD,OAAL,CAAaE,IAAb,CAAkBD,MAAlB;;AAEA,sCAAO,IAAP;AACH;;;gCAGD;AAAA,4DADU,2BACV;;AACI,gBAAIE,QAAQ,KAAKJ,YAAjB;;AADJ;AAAA;AAAA;;AAAA;AAGI,gEAAqB,KAAKC,OAA1B;AAAA,wBAAWC,MAAX;;AACQE,4BAAQF,OAAOE,KAAP,CAAR;AADR;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMI,uCAAOA,KAAP;AACH;;;;;2BAGMC,S;AACPN,UAAMO,SAAN,CAAgBD,SAAhB,mCAA6B,YAC7B;AAAA,wBAD+C,4BAAE,2BAAF,CAC/C;;AAAA,wDAD0D,gCAC1D;;AAAA,2CAD0CE,IAC1C;AAD0CA,gBAC1C;AAAA;;AAAA;;AACI,mCAAO,KAAKC,GAAL,CAASvB,UAAUoB,SAAV,oDAAwBE,IAAxB,EAAT,CAAP;AACH,KAHD,EAA6B,kEAAkB,4BAAE,2BAAF,CAAlB,gCAA2B,gCAA3B,EAA7B;;;AADJ,KAAK,IAAMF,SAAX,IAAwBpB,SAAxB;AAAA,UAAWoB,SAAX;AAAA,CAMe,SAASrB,KAAT,CAAegB,YAAf,EACf;AAAA,6BAD2C,2BAC3C;;AAAA,oDADoD,gCACpD;;AAAA;;AACI,+BAAO,IAAID,KAAJ,CAAUC,YAAV,CAAP;AACH;;+BAHuBhB,K,EAAT,2EAA4B,2BAA5B,gCAAmC,gCAAnC,E","file":"chain.js","sourcesContent":["/* @flow */\n\n/* array */\nimport filter from \"../array/filter\";\nimport find from \"../array/find\";\nimport flatten from \"../array/flatten\";\nimport map from \"../array/map\";\nimport mapKey from \"../array/mapKey\";\nimport reduce from \"../array/reduce\";\nimport reverse from \"../array/reverse\";\n\n/* boolean */\nimport invert from \"../boolean/invert\";\n\n/* function */\nimport processors from \"../function/processors\";\n\n/* math */\nimport sum from \"../math/sum\";\n\n/* object */\nimport extend from \"../object/extend\";\n\nconst CHAINABLE = {\n    /* array */\n    filter,\n    find,\n    flatten: () => flatten,\n    map,\n    mapKey,\n    reduce,\n    reverse: () => reverse,\n    \n    /* boolean */\n    invert: () => invert,\n    \n    /* function */\n    processors,\n    \n    /* math */\n    add: (...numbers : number[]) =>\n        sum.bind(null, ...numbers),\n    \n    /* object */\n    extend,\n};\n\nclass Chain\n{\n    constructor(initialValue : any)\n    {\n        this.actions = [];\n        this.initialValue = initialValue;\n    }\n    \n    tap(action : (value : any) => any) : Chain\n    {\n        this.actions.push(action);\n        \n        return this;\n    }\n    \n    value() : any\n    {\n        let value = this.initialValue;\n        \n        for (const action of this.actions)\n                value = action(value);\n        \n        return value;\n    }\n}\n\nfor (const chainable in CHAINABLE)\n    Chain.prototype[chainable] = function (...args : any[]) : Chain\n    {\n        return this.tap(CHAINABLE[chainable](...args));\n    };\n\nexport default function chain(initialValue : any) : Chain\n{\n    return new Chain(initialValue);\n}\n"]}