{"version":3,"sources":["utils/chain.js"],"names":["chain","Chain","initialValue","actions","action","push","value","i","prototype","CHAINABLE","args","tap","length"],"mappings":";;;;;;;;;;;;;;;;;;sBAmEwBA,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtDxB;AAGA,sDAAc,+BAAC,qCAAQ,2BAAR,CAAD,+BAAiB,2BAAjB,EAAd;;AANA;;;AARA;;;AAeA,oEAAqB,+BAAI,mCAAO,wDAAP,CAAJ,+BAAqB,MAArB,EAArB;;AAEA,oBAAgB,4BAAG,4DAAS,aAAT,CAAH,CAAhB,QAA+C;AAC3C;AACA,YAF2C,oBAG3C,MAH2C,kBAI3C,KAJ2C,iBAK3C,QAL2C,oBAM3C,QAN2C,oBAO3C,SAP2C,EAOhC;AAAA;AAAA,KAPgC;;AAS3C;AACA,YAV2C,EAUjC;AAAA;AAAA,KAViC;;AAY3C;AACA,gBAb2C,uBAA/C;;QAgBMC,K;AAEF,uBAAYC,YAAZ,EACA;AAAA;;AAAA,oCADyB,2BACzB;;AAAA;;AACI,iBAAKC,OAAL,GAAe,EAAf;AACA,iBAAKD,YAAL,GAAoBA,YAApB;AACH;;;;gCAEGE,M,EACJ;AAAA,kCADW,MACX;;AAAA,+DADuB,gCACvB;;AAAA;;AACI,qBAAKD,OAAL,CAAaE,IAAb,CAAkBD,MAAlB;;AAEA,0CAAO,IAAP;AACH;;;oCAGD;AAAA,gEADU,2BACV;;AACI,oBAAIE,QAAQ,KAAKJ,YAAjB;;AADJ;AAAA;AAAA;;AAAA;AAGI,oEAAqB,KAAKC,OAA1B;AAAA,4BAAWC,MAAX;;AACQE,gCAAQF,OAAOE,KAAP,CAAR;AADR;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMI,2CAAOA,KAAP;AACH;;;;;+BAGIC,C;AACLN,cAAMO,SAAN,CAAgBC,UAAUF,CAAV,CAAhB,mCAAgC,YAChC;AAAA,4BADkD,4BAAE,2BAAF,CAClD;;AAAA,4DAD6D,gCAC7D;;AAAA,8CAD6CG,IAC7C;AAD6CA,oBAC7C;AAAA;;AAAA;;AACI,uCAAO,KAAKC,GAAL,CAA2B,aAAlB,QAACF,UAAUF,IAAI,CAAd,CAAD,oDAAsCG,IAAtC,EAAT,CAAP;AACH,SAHD,EAAgC,kEAAkB,4BAAE,2BAAF,CAAlB,gCAA2B,gCAA3B,EAAhC;;;AADJ,SAAK,IAAIH,IAAI,CAAb,EAAgBA,IAAIE,UAAUG,MAA9B,EAAsCL,KAAK,CAA3C;AAAA,cAASA,CAAT;AAAA,KAMe,SAASP,KAAT,CAAeE,YAAf,EACf;AAAA,iCAD2C,2BAC3C;;AAAA,wDADoD,gCACpD;;AAAA;;AACI,mCAAO,IAAID,KAAJ,CAAUC,YAAV,CAAP;AACH;;mCAHuBF,K,EAAT,2EAA4B,2BAA5B,gCAAmC,gCAAnC,E","file":"chain.js","sourcesContent":["/* @flow */\n\n/* array */\nimport filter from \"../array/filter\";\nimport find from \"../array/find\";\nimport map from \"../array/map\";\nimport mapKey from \"../array/mapKey\";\nimport reduce from \"../array/reduce\";\nimport reverse from \"../array/reverse\";\n\n/* boolean */\nimport invert from \"../boolean/invert\";\n\n/* function */\nimport processors from \"../function/processors\";\n\ntype Action = (value : any) => any;\ntype ActionCreater = (...args : any[]) => Action;\n\nconst CHAINABLE : (string | ActionCreater)[] = [\n    /* array */\n    \"filter\", filter,\n    \"find\", find,\n    \"map\", map,\n    \"mapKey\", mapKey,\n    \"reduce\", reduce,\n    \"reverse\", () => reverse,\n    \n    /* boolean */\n    \"invert\", () => invert,\n    \n    /* function */\n    \"processors\", processors,\n];\n\nclass Chain\n{\n    constructor(initialValue : any)\n    {\n        this.actions = [];\n        this.initialValue = initialValue;\n    }\n    \n    tap(action : Action) : Chain\n    {\n        this.actions.push(action);\n        \n        return this;\n    }\n    \n    value() : any\n    {\n        let value = this.initialValue;\n        \n        for (const action of this.actions)\n                value = action(value);\n        \n        return value;\n    }\n}\n\nfor (let i = 0; i < CHAINABLE.length; i += 2)\n    Chain.prototype[CHAINABLE[i]] = function (...args : any[]) : Chain\n    {\n        return this.tap((CHAINABLE[i + 1] : ActionCreater)(...args));\n    };\n\nexport default function chain(initialValue : any) : Chain\n{\n    return new Chain(initialValue);\n}\n"]}