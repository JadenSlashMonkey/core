{"version":3,"sources":["utils/chain.js"],"names":["chain","Chain","initialValue","actions","action","push","value","i","prototype","CHAINABLE","args","tap","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;kBAmEwBA,K;;AAhExB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AAGA;;;;;;;;;;AADA;AAGA,kDAAc,+BAAC,qCAAQ,2BAAR,CAAD,+BAAiB,2BAAjB,EAAd;;AANA;;;AARA;;;AAeA,gEAAqB,+BAAI,mCAAO,wDAAP,CAAJ,+BAAqB,MAArB,EAArB;;AAEA,gBAAgB,4BAAG,4DAAS,aAAT,CAAH,CAAhB,QAA+C;AAC3C;AACA,QAF2C,oBAG3C,MAH2C,kBAI3C,KAJ2C,iBAK3C,QAL2C,oBAM3C,QAN2C,oBAO3C,SAP2C,EAOhC;AAAA;AAAA,CAPgC;;AAS3C;AACA,QAV2C,EAUjC;AAAA;AAAA,CAViC;;AAY3C;AACA,YAb2C,uBAA/C;;IAgBMC,K;AAEF,mBAAYC,YAAZ,EACA;AAAA;;AAAA,gCADyB,2BACzB;;AAAA;;AACI,aAAKC,OAAL,GAAe,EAAf;AACA,aAAKD,YAAL,GAAoBA,YAApB;AACH;;;;4BAEGE,M,EACJ;AAAA,8BADW,MACX;;AAAA,2DADuB,gCACvB;;AAAA;;AACI,iBAAKD,OAAL,CAAaE,IAAb,CAAkBD,MAAlB;;AAEA,sCAAO,IAAP;AACH;;;gCAGD;AAAA,4DADU,2BACV;;AACI,gBAAIE,QAAQ,KAAKJ,YAAjB;;AADJ;AAAA;AAAA;;AAAA;AAGI,gEAAqB,KAAKC,OAA1B;AAAA,wBAAWC,MAAX;;AACQE,4BAAQF,OAAOE,KAAP,CAAR;AADR;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMI,uCAAOA,KAAP;AACH;;;;;2BAGIC,C;AACLN,UAAMO,SAAN,CAAgBC,UAAUF,CAAV,CAAhB,mCAAgC,YAChC;AAAA,wBADkD,4BAAE,2BAAF,CAClD;;AAAA,wDAD6D,gCAC7D;;AAAA,0CAD6CG,IAC7C;AAD6CA,gBAC7C;AAAA;;AAAA;;AACI,mCAAO,KAAKC,GAAL,CAA2B,aAAlB,QAACF,UAAUF,IAAI,CAAd,CAAD,oDAAsCG,IAAtC,EAAT,CAAP;AACH,KAHD,EAAgC,kEAAkB,4BAAE,2BAAF,CAAlB,gCAA2B,gCAA3B,EAAhC;;;AADJ,KAAK,IAAIH,IAAI,CAAb,EAAgBA,IAAIE,UAAUG,MAA9B,EAAsCL,KAAK,CAA3C;AAAA,UAASA,CAAT;AAAA,CAMe,SAASP,KAAT,CAAeE,YAAf,EACf;AAAA,6BAD2C,2BAC3C;;AAAA,oDADoD,gCACpD;;AAAA;;AACI,+BAAO,IAAID,KAAJ,CAAUC,YAAV,CAAP;AACH;;+BAHuBF,K,EAAT,2EAA4B,2BAA5B,gCAAmC,gCAAnC,E","file":"chain.js","sourcesContent":["/* @flow */\n\n/* array */\nimport filter from \"../array/filter\";\nimport find from \"../array/find\";\nimport map from \"../array/map\";\nimport mapKey from \"../array/mapKey\";\nimport reduce from \"../array/reduce\";\nimport reverse from \"../array/reverse\";\n\n/* boolean */\nimport invert from \"../boolean/invert\";\n\n/* function */\nimport processors from \"../function/processors\";\n\ntype Action = (value : any) => any;\ntype ActionCreater = (...args : any[]) => Action;\n\nconst CHAINABLE : (string | ActionCreater)[] = [\n    /* array */\n    \"filter\", filter,\n    \"find\", find,\n    \"map\", map,\n    \"mapKey\", mapKey,\n    \"reduce\", reduce,\n    \"reverse\", () => reverse,\n    \n    /* boolean */\n    \"invert\", () => invert,\n    \n    /* function */\n    \"processors\", processors,\n];\n\nclass Chain\n{\n    constructor(initialValue : any)\n    {\n        this.actions = [];\n        this.initialValue = initialValue;\n    }\n    \n    tap(action : Action) : Chain\n    {\n        this.actions.push(action);\n        \n        return this;\n    }\n    \n    value() : any\n    {\n        let value = this.initialValue;\n        \n        for (const action of this.actions)\n                value = action(value);\n        \n        return value;\n    }\n}\n\nfor (let i = 0; i < CHAINABLE.length; i += 2)\n    Chain.prototype[CHAINABLE[i]] = function (...args : any[]) : Chain\n    {\n        return this.tap((CHAINABLE[i + 1] : ActionCreater)(...args));\n    };\n\nexport default function chain(initialValue : any) : Chain\n{\n    return new Chain(initialValue);\n}\n"]}