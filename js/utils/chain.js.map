{"version":3,"sources":["utils/chain.js"],"names":["chain","initialValue","actions","tap","action","value","i","ret","CHAINABLE","args","length"],"mappings":";;;;;kBA6BwBA,K;;AA1BxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;;;;;;;;;AATA;;;AAQA;;;AAGA,kDAAc,+BAAC,qCAAQ,2BAAR,CAAD,+BAAiB,2BAAjB,EAAd;;AACA,gEAAqB,+BAAI,mCAAO,4BAAM,2BAAN,CAAP,CAAJ,+BAA0B,MAA1B,EAArB;;AAEA,gBAAgB,4BAAQ,4DAAS,aAAT,CAAR,CAAhB,QAAkD;AAC9C;AACA,QAF8C,oBAG9C,MAH8C,kBAI9C,KAJ8C,iBAK9C,QAL8C,oBAM9C,QAN8C,oBAO9C,SAP8C,EAOnC;AAAA;AAAA,CAPmC;;AAS9C;AACA,QAV8C,EAUpC;AAAA;AAAA,CAVoC,CAAlD;;AAae,SAASA,KAAT,CAAeC,YAAf,EACf;AAAA,4BAD2C,2BAC3C;;AAAA,mDADoD,8BACpD;;AAAA;;AACI,8BAAO,+BAAC,SAASD,KAAT,CAAeE,OAAf,EACR;AAAA,2BAD+B,4BAAQ,MAAR,CAC/B;;AAAA,wDADkD,8BAClD;;AAAA;;AACI,kBAAU,8BAAV,QAAqB;AACjBC,gDAAK,UAACC,MAAD;AAAA,kCAAQ,MAAR;;AAAA,gEAAoB,8BAApB;;AAAA;;AAAA,2CACDJ,mCACOE,OADP,IAEIE,MAFJ,GADC;AAAA,aAAL,EAAK,qEAAQ,MAAR,gCAAkB,8BAAlB,EAAL,CADiB;;AAOjBC,kDAAO,YACP;AAAA,gEADY,2BACZ;;AACI,oBAAIA,QAAQJ,YAAZ;;AADJ;AAAA;AAAA;;AAAA;AAGI,yCAAqBC,OAArB;AAAA,4BAAWE,MAAX;;AACIC,gCAAQD,OAAOC,KAAP,CAAR;AADJ;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMI,2CAAOA,KAAP;AACH,aARD,EAAO,4DAAG,2BAAH,EAAP;AAPiB,SAArB;;AADJ,mCAmBaC,CAnBb;AAoBQC,gBAAIC,UAAUF,CAAV,CAAJ,mCAAoB;AAAA,kDAAIG,IAAJ;AAAIA,wBAAJ;AAAA;;AAAA,gCAAS,4BAAQ,2BAAR,CAAT;;AAAA,gEAAyB,8BAAzB;;AAAA;;AAAA,2CAChBF,IAAIJ,GAAJ,CAA0B,aAAlB,QAACK,UAAUF,IAAI,CAAd,CAAD,mBAAsCG,IAAtC,CAAR,CADgB;AAAA,aAApB,EAAoB,kEAAS,4BAAQ,2BAAR,CAAT,gCAAuB,8BAAvB,EAApB;AApBR;;AAmBI,aAAK,IAAIH,IAAI,CAAb,EAAgBA,IAAIE,UAAUE,MAA9B,EAAsCJ,KAAK,CAA3C;AAAA,kBAASA,CAAT;AAAA,SAIA,2BAAOC,GAAP;AACH,KAzBM,EAAC,sEAAuB,4BAAQ,MAAR,CAAvB,gCAAwC,8BAAxC,EAAD,EAyBJ,EAzBI,CAAP;AA0BH;;+BA5BuBP,K,EAAT,2EAA4B,2BAA5B,gCAAmC,8BAAnC,E","file":"chain.js","sourcesContent":["/* @flow */\n\n/* array */\nimport filter from \"../array/filter\";\nimport find from \"../array/find\";\nimport map from \"../array/map\";\nimport mapKey from \"../array/mapKey\";\nimport reduce from \"../array/reduce\";\nimport reverse from \"../array/reverse\";\n\n/* boolean */\nimport invert from \"../boolean/invert\";\n\ntype Action = (value : any) => any;\ntype ActionCreater = (...args : Array<any>) => Action;\n\nconst CHAINABLE : Array<string | ActionCreater> = [\n    /* array */\n    \"filter\", filter,\n    \"find\", find,\n    \"map\", map,\n    \"mapKey\", mapKey,\n    \"reduce\", reduce,\n    \"reverse\", () => reverse,\n    \n    /* boolean */\n    \"invert\", () => invert,\n];\n\nexport default function chain(initialValue : any) : Object\n{\n    return (function chain(actions : Array<Action>) : Object\n    {\n        const ret : Object = {\n            tap: (action : Action) : Object =>\n                chain([\n                    ...actions,\n                    action,\n                ]),\n            \n            value: () : any =>\n            {\n                let value = initialValue;\n                \n                for (const action of actions)\n                    value = action(value);\n                \n                return value;\n            },\n        };\n        \n        for (let i = 0; i < CHAINABLE.length; i += 2)\n            ret[CHAINABLE[i]] = (...args : Array<any>) : Object =>\n                ret.tap((CHAINABLE[i + 1] : ActionCreater)(...args));\n        \n        return ret;\n    })([]);\n}\n"]}